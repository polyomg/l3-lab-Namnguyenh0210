<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Lab2/src/main/java/com/poly/lab2/controller/ProductListController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab2/src/main/java/com/poly/lab2/controller/ProductListController.java" />
              <option name="updatedContent" value="package com.poly.lab2.controller;&#10;&#10;import com.poly.lab2.service.ProductService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.ui.Model;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestParam;&#10;&#10;/**&#10; * ProductListController - Bài 6: Danh sách sản phẩm có phân trang&#10; * Giải thích: Hiển thị danh sách sản phẩm với phân trang, liên kết từ bài 3&#10; */&#10;@Controller&#10;public class ProductListController {&#10;    &#10;    @Autowired&#10;    private ProductService productService;&#10;    &#10;    @GetMapping(&quot;/products&quot;)&#10;    public String productList(@RequestParam(defaultValue = &quot;0&quot;) int page,&#10;                             @RequestParam(defaultValue = &quot;5&quot;) int size,&#10;                             Model model) {&#10;        &#10;        // Lấy danh sách sản phẩm theo trang&#10;        var products = productService.getProductsByPage(page, size);&#10;        var totalPages = productService.getTotalPages(size);&#10;        var totalProducts = productService.getTotalProducts();&#10;        &#10;        // Chia sẻ dữ liệu với view&#10;        model.addAttribute(&quot;products&quot;, products);&#10;        model.addAttribute(&quot;currentPage&quot;, page);&#10;        model.addAttribute(&quot;totalPages&quot;, totalPages);&#10;        model.addAttribute(&quot;pageSize&quot;, size);&#10;        model.addAttribute(&quot;totalProducts&quot;, totalProducts);&#10;        &#10;        // Tính toán các trang hiển thị (tối đa 5 trang)&#10;        int startPage = Math.max(0, page - 2);&#10;        int endPage = Math.min(totalPages - 1, page + 2);&#10;        model.addAttribute(&quot;startPage&quot;, startPage);&#10;        model.addAttribute(&quot;endPage&quot;, endPage);&#10;        &#10;        return &quot;product/list&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Lab2/src/main/java/com/poly/lab2/service/ProductService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Lab2/src/main/java/com/poly/lab2/service/ProductService.java" />
              <option name="updatedContent" value="package com.poly.lab2.service;&#10;&#10;import com.poly.lab2.model.Product;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * ProductService - Quản lý danh sách sản phẩm&#10; * Giải thích: Service lưu trữ và quản lý sản phẩm, hỗ trợ phân trang&#10; */&#10;@Service&#10;public class ProductService {&#10;    private List&lt;Product&gt; products = new ArrayList&lt;&gt;();&#10;    &#10;    // Khởi tạo một số sản phẩm mẫu&#10;    public ProductService() {&#10;        products.add(new Product(&quot;iPhone 15&quot;, 25000000.0));&#10;        products.add(new Product(&quot;Samsung Galaxy S24&quot;, 22000000.0));&#10;        products.add(new Product(&quot;MacBook Pro&quot;, 45000000.0));&#10;        products.add(new Product(&quot;Dell XPS 13&quot;, 30000000.0));&#10;        products.add(new Product(&quot;iPad Pro&quot;, 28000000.0));&#10;        products.add(new Product(&quot;Surface Pro&quot;, 35000000.0));&#10;        products.add(new Product(&quot;AirPods Pro&quot;, 6000000.0));&#10;        products.add(new Product(&quot;Sony WH-1000XM5&quot;, 8000000.0));&#10;        products.add(new Product(&quot;Canon EOS R5&quot;, 85000000.0));&#10;        products.add(new Product(&quot;Nintendo Switch&quot;, 8500000.0));&#10;        products.add(new Product(&quot;PlayStation 5&quot;, 15000000.0));&#10;        products.add(new Product(&quot;Xbox Series X&quot;, 14000000.0));&#10;        products.add(new Product(&quot;Apple Watch&quot;, 12000000.0));&#10;        products.add(new Product(&quot;Samsung Watch&quot;, 8000000.0));&#10;        products.add(new Product(&quot;Dyson V15&quot;, 18000000.0));&#10;        products.add(new Product(&quot;Tesla Model 3&quot;, 1500000000.0));&#10;        products.add(new Product(&quot;BMW X5&quot;, 2200000000.0));&#10;        products.add(new Product(&quot;Mercedes C-Class&quot;, 1800000000.0));&#10;        products.add(new Product(&quot;Rolex Submariner&quot;, 250000000.0));&#10;        products.add(new Product(&quot;Louis Vuitton Bag&quot;, 45000000.0));&#10;    }&#10;    &#10;    // Thêm sản phẩm mới&#10;    public void addProduct(Product product) {&#10;        products.add(product);&#10;    }&#10;    &#10;    // Lấy tất cả sản phẩm&#10;    public List&lt;Product&gt; getAllProducts() {&#10;        return products;&#10;    }&#10;    &#10;    // Lấy sản phẩm theo trang&#10;    public List&lt;Product&gt; getProductsByPage(int page, int size) {&#10;        int start = page * size;&#10;        int end = Math.min(start + size, products.size());&#10;        &#10;        if (start &gt;= products.size()) {&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;        &#10;        return products.subList(start, end);&#10;    }&#10;    &#10;    // Lấy tổng số trang&#10;    public int getTotalPages(int size) {&#10;        return (int) Math.ceil((double) products.size() / size);&#10;    }&#10;    &#10;    // Lấy tổng số sản phẩm&#10;    public int getTotalProducts() {&#10;        return products.size();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>